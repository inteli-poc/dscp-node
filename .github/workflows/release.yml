name: Build new release

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  

permissions:
  contents: write
  packages: write
  pull-requests: read

jobs:
  preconditions:
    runs-on: ubuntu-latest
    outputs:
      repo_name: ${{ steps.repo_ids.outputs.REPO_NAME }}
      org_name: ${{ steps.repo_ids.outputs.ORG_NAME }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Check token
        run: |
          if [ -z "${{ secrets.GITHUB_TOKEN }}"]; then
            echo "Must provide a GITHUB_TOKEN secret in order to run release workflow"
            exit 1
          fi
      - name: Get repository identifiers
        id: repo_ids
        run: |
          REPO_NAME=$(echo "${{ github.event.repository.name }}" | tr '[:upper:]' '[:lower:]')
          ORG_NAME=$(echo "${{ github.event.repository.owner.name }}" | tr '[:upper:]' '[:lower:]')
          echo "::set-output name=REPO_NAME::$REPO_NAME"
          echo "::set-output name=ORG_NAME::$ORG_NAME"
  # Gets the build version and information about if this is a new version
  get-version:
    name: Get version
    runs-on: ubuntu-latest
    outputs:
      is_new_version: ${{ steps.get_version.outputs.IS_NEW_VERSION }}
      version: ${{ steps.get_version.outputs.VERSION }}
      sane_branch_name_key: ${{ steps.get_version.outputs.SANE_BRANCH_NAME_KEY }}
      build_date: ${{ steps.get_version.outputs.BUILD_DATE }}
      is_prerelease: ${{ steps.get_version.outputs.IS_PRERELEASE }}
      toolchain: ${{ steps.get_toolchain.outputs.TOOLCHAIN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - run: git fetch --tags
      - run: pip3 install yq==2.13.0
      - name: Get Build Version
        id: get_version
        run: ./scripts/check-version.sh
        shell: bash
      - name: Get Toolchain Version
        id: get_toolchain
        run: |
          echo "##[set-output name=TOOLCHAIN;]$(cat rust-toolchain)"

  # Github releases are only performed when the release version changes
  build-release:
    name: Build release
    runs-on: ubuntu-latest
    needs: [get-version,preconditions]
    if: ${{ needs.get-version.outputs.is_new_version == 'true' ||  needs.get-version.outputs.is_prerelease == 'true'}}

    steps:
      - uses: actions/checkout@master
      - name: Install latest nightly
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ needs.get-version.outputs.toolchain }}
          target: wasm32-unknown-unknown
      - name: Install sccache
        env:
          TEMP: ${{ runner.temp }}
        run: |
          curl -L https://github.com/gruntwork-io/fetch/releases/download/v0.3.7/fetch_linux_amd64 --output $TEMP/fetch
          chmod +x $TEMP/fetch
          $TEMP/fetch --repo="https://github.com/mozilla/sccache" --tag="~>0.2.15" --release-asset="^sccache-v[0-9.]*-x86_64-unknown-linux-musl.tar.gz$" $TEMP
          tar -xvf $TEMP/sccache-v*-x86_64-unknown-linux-musl.tar.gz -C $TEMP
          mv $TEMP/sccache-v*-x86_64-unknown-linux-musl/sccache $TEMP/sccache
          rm -rf $TEMP/sccache-v*-x86_64-unknown-linux-musl $TEMP/sccache-v*-x86_64-unknown-linux-musl.tar.gz $TEMP/fetch
          chmod +x $TEMP/sccache
      - name: Cache cargo registry
        uses: actions/cache@v2
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
            ${{ runner.os }}-cargo-registry-
      - name: Cache cargo index
        uses: actions/cache@v2
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
            ${{ runner.os }}-cargo-index-
      - name: Cache sccache
        uses: actions/cache@v2
        with:
          path: ${{ runner.temp }}/cache
          key: ${{ runner.os }}-cargo-build-cache-release-${{ needs.get-version.outputs.toolchain }}-${{ needs.get-version.outputs.sane_branch_name_key }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-cache-release-${{ needs.get-version.outputs.toolchain }}-${{ needs.get-version.outputs.sane_branch_name_key }}
            ${{ runner.os }}-cargo-build-cache-release-${{ needs.get-version.outputs.toolchain }}-
            ${{ runner.os }}-cargo-build-cache-release-
      - name: Cargo build
        uses: actions-rs/cargo@v1
        env:
          RUSTC_WRAPPER: ${{ runner.temp }}/sccache
          SCCACHE_DIR: ${{ runner.temp }}/cache
        with:
          command: build
          args: --release
      - name: Prepare artefacts
        env:
          BUILD_VERSION: ${{ needs.get-version.outputs.version }}
          TEMP: ${{ runner.temp }}
        run: |
          mkdir $TEMP/artefacts
          cp ./target/release/dscp-node $TEMP/artefacts/dscp-node
          cp ./target/release/wbuild/dscp-node-runtime/dscp_node_runtime.compact.wasm $TEMP/artefacts/dscp_node_runtime.compact.wasm
          echo $BUILD_VERSION | tee $TEMP/artefacts/VERSION.txt
          shasum -a 256 $TEMP/artefacts/dscp-node | cut -d ' ' -f 1 | tee $TEMP/artefacts/dscp-node.sha256
          shasum -a 256 $TEMP/artefacts/dscp_node_runtime.compact.wasm | cut -d ' ' -f 1 | tee $TEMP/artefacts/dscp_node_runtime.compact.wasm.sha256
          pushd $TEMP/artefacts/
          tar -czvf dscp-node-${BUILD_VERSION}-x86_64-unknown-linux-gnu.tar.gz ./VERSION.txt ./dscp-node ./dscp-node.sha256
          tar -czvf dscp-node-${BUILD_VERSION}-runtime-wasm.tar.gz ./VERSION.txt ./dscp_node_runtime.compact.wasm ./dscp_node_runtime.compact.wasm.sha256
          popd;

      - name: Build release version
        uses: softprops/action-gh-release@v1
        with:
          token: "${{ secrets.GITHUB_TOKEN }}"
          tag_name: ${{ needs.get-version.outputs.version }}
          name: ${{ needs.get-version.outputs.version }}
          prerelease: ${{ needs.get-version.outputs.is_prerelease == 'true' }}
          generate_release_notes: true
          files: |
            ${{ runner.temp }}/artefacts/dscp-node-${{ needs.get-version.outputs.version }}-x86_64-unknown-linux-gnu.tar.gz
            ${{ runner.temp }}/artefacts/dscp-node-${{ needs.get-version.outputs.version }}-runtime-wasm.tar.gz
      - name: Delete release latest
        if: ${{ needs.get-version.outputs.is_prerelease != 'true' }}
        uses: actions/github-script@v5
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const { owner, repo } = context.repo
            try {
              await github.rest.git.deleteRef({ owner, repo, ref: 'tags/latest' })
            }
            catch (err) {
              if (err.status !== 422) throw err
            }   
      - name: Build release latest
        if: ${{ needs.get-version.outputs.is_prerelease != 'true' }}
        uses: softprops/action-gh-release@v1
        with:
          token: "${{ secrets.GITHUB_TOKEN }}"
          tag_name: latest
          name: Latest ${{ needs.get-version.outputs.version }}
          prerelease: false
          generate_release_notes: true
          files: |
            ${{ runner.temp }}/artefacts/dscp-node-${{ needs.get-version.outputs.version }}-x86_64-unknown-linux-gnu.tar.gz
            ${{ runner.temp }}/artefacts/dscp-node-${{ needs.get-version.outputs.version }}-runtime-wasm.tar.gz

  # Docker build  are always performed but are only version tagged on new version
  build-docker:
    name: Build Docker
    runs-on: ubuntu-latest
    needs: [get-version, build-release]
    steps:
    - uses: actions/checkout@master
    - name: Setup QEMU
      uses: docker/setup-qemu-action@v1
      with:
        platforms: linux/amd64
    - name: Setup Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1
      with:
        buildkitd-flags: --debug
    - name: Generate tags
      id: generate-tags
      env:
        VERSION: ${{ needs.get-version.outputs.version }}
        IS_NEW_VERSION: ${{ needs.get-version.outputs.is_new_version }}
        IS_PRERELEASE: ${{ needs.get-version.outputs.is_prerelease }}
      # if it's a new non prerelease version tag with hash, version latest-dev and latest
      # if it's a new prerelease version tag with hash, version and latest-dev
      # if it's a non new version tag with hash and latest-dev
      run: |
        if [ "$IS_NEW_VERSION" == "true" ]; then
          echo "##[set-output name=VERSION_TAG;]ghcr.io/${{ needs.preconditions.outputs.org_name }}/${{ needs.preconditions.outputs.repo_name }}:$VERSION";
          if [ "$IS_PRERELEASE" == "false" ]; then
            echo "##[set-output name=LATEST_TAG;]ghcr.io/${{ needs.preconditions.outputs.org_name }}/${{ needs.preconditions.outputs.repo_name }}:latest";
          else
            echo "##[set-output name=LATEST_TAG;]";
          fi;
        else
          echo "##[set-output name=VERSION_TAG;]";
          echo "##[set-output name=LATEST_TAG;]";
        fi;
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Build image
      uses: docker/build-push-action@v2
      with:
        load: true
        builder: ${{ steps.buildx.outputs.name }}
        context: .
        build-args: |
          RUST_TOOLCHAIN=${{ needs.get-version.outputs.toolchain }}
          DSCP_VERSION=${{ needs.get-version.outputs.version }}
        file: ./Dockerfile
        platforms: linux/amd64
        tags: |
          ghcr.io/${{ needs.preconditions.outputs.org_name }}/${{ needs.preconditions.outputs.repo_name }}:${{ github.sha }}
          ${{ steps.generate-tags.outputs.VERSION_TAG }}
          ${{ steps.generate-tags.outputs.LATEST_TAG }}
        labels: |
          org.opencontainers.image.title=dscp-node
          org.opencontainers.image.description=${{ github.event.repository.description }}
          org.opencontainers.image.source=${{ github.event.repository.html_url }}
          org.opencontainers.image.url=${{ github.event.repository.html_url }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.version=${{ needs.get-version.outputs.version }}
          org.opencontainers.image.created=${{ needs.get-version.outputs.build_date }}
    - name: Publish image
      run: docker push --all-tags ghcr.io/${{ needs.preconditions.outputs.org_name }}/${{ needs.preconditions.outputs.repo_name }}